// Generated by CoffeeScript 1.10.0
(function() {
  var DBRunner, EventEmitter, JDBC, LocalRunner, Promise, SSHRunner, TaskRunner, fs,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SSHRunner = require('./sshrunner');

  DBRunner = require('./dbrunner');

  LocalRunner = require('./localrunner');

  JDBC = require('../constants/JDBC.js');

  Promise = require('bluebird');

  EventEmitter = require('events').EventEmitter;

  fs = require('fs');

  module.exports = TaskRunner = (function(superClass) {
    extend(TaskRunner, superClass);

    TaskRunner.runner = void 0;

    function TaskRunner(task) {
      this.task = task;
    }

    TaskRunner.prototype.run = function() {
      var me;
      me = this;
      return this.getConfig().then(function(config) {
        var script;
        if (config.type === 'db') {
          me.runner = new DBRunner(config);
        } else if (config.type === 'ssh') {
          me.runner = new SSHRunner(config);
        } else if (config.type === 'local') {
          me.runner = new LocalRunner();
        }
        me.runner.on('start', function() {
          return me.emit('start');
        });
        me.runner.on('error', function(data) {
          me.emit('error', data);
          return me.emit('stop');
        });
        me.runner.on('success', function() {
          me.emit('success');
          return me.emit('stop');
        });
        me.runner.on('killed', function() {
          me.emit('killed');
          return me.emit('stop');
        });
        script = me.getScript();
        return me.runner.run(script);
      });
    };

    TaskRunner.prototype.getScript = function() {
      var command, me, script, sv;
      me = this;
      sv = me.task.scriptValue;
      command = me.getCommand(me.task.technology);
      script = "";
      if (!command) {
        return sv;
      }
      script = sv.replace(/"/g, '\\"');
      return command + " \"" + script + "\"";
    };

    TaskRunner.prototype.getCommand = function(tech) {
      var cmd;
      if (!tech) {
        return;
      }
      cmd = {
        'OS': void 0,
        'PLSQL': void 0,
        'JAVA_SCRIPT': 'node -e',
        'COFFEE_SCRIPT': 'coffee -e',
        'RUBY': 'ruby -e',
        'PYTHON': 'python -c'
      };
      return cmd[tech.toUpperCase()];
    };

    TaskRunner.prototype.getConfig = function() {
      return this.getConnectionConfig().then((function(_this) {
        return function(connection) {
          return _this.getRunnerConfig(connection);
        };
      })(this));
    };

    TaskRunner.prototype.getRunnerConfig = function(connection) {
      var config;
      if (connection.connectionType === 'DB') {
        return this.getDBConnectionConfig(connection);
      } else if (connection.connectionType === 'SSH') {
        return this.getSSHConnectionConfig(connection);
      } else if (connection.connectionType === 'Local') {
        config = {
          type: 'local'
        };
        return config;
      }
    };

    TaskRunner.prototype.getConnectionConfig = function() {
      var me;
      me = this;
      if (!_.isEmpty(this.task.connection)) {
        return Promise.resolve(me.task.connection);
      } else {
        return Scheduler.findOne(this.task.session.plan.scheduler).populateAll().then(function(scheduler) {
          return scheduler.connection;
        });
      }
    };

    TaskRunner.prototype.getDBConnectionConfig = function(c) {
      return JDBC.getDriver().then(function(libs) {
        var className, config, vendor;
        if (_.isEmpty(c.className) && !JDBC.Vendor.findByUrl(c.url)) {
          throw 'Can not resolve className for ' + c.url;
        }
        className = c.className;
        if (_.isEmpty(className)) {
          vendor = JDBC.Vendor.findByUrl(c.url);
          if (vendor) {
            className = _.first(vendor.className);
          }
        }
        config = {
          url: c.url,
          username: c.username,
          password: c.password,
          className: className,
          type: 'db'
        };
        return new Promise(function(resolve, reject) {
          return fs.readdir('driver', function(err, data) {
            if (err) {
              return reject(err);
            } else {
              config.libs = _.map(data, function(d) {
                return "driver/" + d;
              });
              return resolve(config);
            }
          });
        });
      });
    };

    TaskRunner.prototype.getSSHConnectionConfig = function(c) {
      var config;
      config = {
        host: c.host,
        port: c.port,
        username: c.username,
        password: c.password,
        type: 'ssh'
      };
      return Promise.resolve(config);
    };

    TaskRunner.prototype.kill = function() {};

    return TaskRunner;

  })(EventEmitter);

}).call(this);
