// Generated by CoffeeScript 1.10.0
(function() {
  var EventEmitter, LocalRunner, _, exec,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  exec = require('child_process').exec;

  EventEmitter = require('events').EventEmitter;

  module.exports = LocalRunner = (function(superClass) {
    extend(LocalRunner, superClass);

    function LocalRunner() {}

    LocalRunner.prototype.run = function(script, params) {
      var data, me, process;
      me = this;
      if (_.isEmpty(params)) {
        process = exec(script, params);
      } else {
        process = exec(script);
      }
      me.emit('start');
      data = '';
      process.stdout.on('data', function(_data) {
        return data += _data;
      });
      process.stderr.on('data', function(_data) {
        return data += _data;
      });
      process.on('close', function(code, signal) {
        switch (code) {
          case 0:
            me.emit('success', data);
            break;
          case 1:
            me.emit('error', data);
            break;
          case 137:
            me.emit('error', "Killed " + data);
            break;
          default:
            me.emit('error', "Stream closed unexpectedly! " + data);
        }
        me.emit('stop');
        return process.stdin.end();
      });
      return process.on('error', function(err) {
        return console.log(err);
      });
    };

    return LocalRunner;

  })(EventEmitter);

}).call(this);
