// Generated by CoffeeScript 1.10.0
(function() {
  var EventEmitter, Promise, SSHClient, SSHRunner, StringDecoder, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SSHClient = require('ssh2').Client;

  Promise = require('bluebird');

  EventEmitter = require('events').EventEmitter;

  _ = require('lodash');

  StringDecoder = require('string_decoder').StringDecoder;

  module.exports = SSHRunner = (function(superClass) {
    extend(SSHRunner, superClass);

    SSHRunner.stream = void 0;

    function SSHRunner(config) {
      this.config = config;
      this.ssh = new SSHClient();
    }

    SSHRunner.prototype.run = function(script, params) {
      var me;
      me = this;
      return this.connect().then(function() {
        return me.ssh.shell(function(err, stream) {
          var data, decoder;
          me.stream = stream;
          if (err) {
            me.emit('error', err);
            me.emit('stop');
          }
          data = '';
          decoder = new StringDecoder('utf8');
          stream.on('close', function(code, signal) {
            switch (code) {
              case 0:
                me.emit('success', data);
                break;
              case 1:
                me.emit('error', data);
                break;
              case 137:
                me.emit('error', "Killed " + data);
                break;
              default:
                me.emit('error', "Stream closed unexpectedly! " + data);
            }
            me.emit('stop');
            return me.end();
          });
          stream.on('data', function(d) {
            return data += decoder.write(d);
          });
          stream.stderr.on('data', function(d) {
            return data += decoder.write(d);
          });
          _.each(params, function(param) {
            if (_.isString(param)) {
              return script = script + " \"" + param + "\"";
            } else {
              return script = script + " " + param;
            }
          });
          return stream.end(script + "\n exit\n");
        });
      });
    };

    SSHRunner.prototype.connect = function() {
      var me;
      me = this;
      return new Promise(function(resolve, reject) {
        me.ssh.on('ready', function() {
          me.emit('connected');
          me.emit('start');
          return resolve(me.ssh);
        });
        me.ssh.on('error', function(e) {
          me.emit('connectionerror', e);
          me.emit('stop');
          return reject(e);
        });
        return me.ssh.connect(me.config);
      });
    };

    SSHRunner.prototype.kill = function() {
      this.ssh.end();
      this.emit('killed');
      return this.emit('stop');
    };

    SSHRunner.prototype.end = function() {
      return this.ssh.end();
    };

    return SSHRunner;

  })(EventEmitter);

}).call(this);
