// Generated by CoffeeScript 1.10.0
(function() {
  var DBRunner, EventEmitter, NodeJDBC, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  NodeJDBC = require('nodejdbc');

  _ = require('lodash');

  EventEmitter = require('events').EventEmitter;

  module.exports = DBRunner = (function(superClass) {
    extend(DBRunner, superClass);

    DBRunner.connection = void 0;

    function DBRunner(config) {
      this.config = config;
      this.db = new NodeJDBC(this.config);
    }

    DBRunner.prototype.getCall = function(script, params) {
      var parameters, proc, vars;
      proc = "";
      vars = "";
      parameters = [];
      _.each(script.trim().split(' '), function(item, index) {
        if (index === 0) {
          return proc = item;
        } else {
          vars = vars + ",?";
          return parameters.push(item);
        }
      });
      _.each(params, function(param, index) {
        parameters.push(param);
        return vars = vars + ",?";
      });
      vars = vars.substr(1);
      return ["{call " + proc + "(" + vars + ") }", parameters];
    };

    DBRunner.prototype.run = function(script, params) {
      var me;
      me = this;
      if (!script) {
        me.emit('success');
        return;
      }
      return this.db.getConnection().then(function(connection) {
        var call, ref, vars;
        vars = "";
        me.connection = connection;
        ref = me.getCall(script, params), call = ref[0], params = ref[1];
        me.emit('start');
        return connection.prepareCall(call).then(function(statement) {
          me.statement = statement;
          _.each(params, function(param, index) {
            if (_.isString(param)) {
              statement.setString(index + 1, param);
            }
            if (_.isNumber(param)) {
              return statement.setInt(index + 1, param);
            }
          });
          return statement.executeUpdate().then(function() {
            connection.close();
            return me.emit('success');
          });
        });
      })["catch"](function(e) {
        return me.emit('error', e);
      });
    };

    DBRunner.prototype.kill = function() {
      var me;
      me = this;
      return this.statement.close().then(function() {
        return me.connection.close();
      });
    };

    return DBRunner;

  })(EventEmitter);

}).call(this);
